---
title: "Vectores"
format:
  html: 
    toc: false
    section-divs: true
    include-after-body: 
      - text: |
          <script src="/js/progressive-reveal.js"></script>

engine: knitr
filters:
  - webr
webr:
  cell-options:
    editor-font-scale: 0.85
    fig-width: 6
    fig-height: 3.7
    out-width: "70%"
---

```{r include=FALSE}
source(here::here("R", "helpers.R"))
```

### Vectores {.no-hide}

Mira [este video](https://vimeo.com/220490316):

```{=html}
<div class="ratio ratio-4x3">
<iframe src="https://player.vimeo.com/video/220490316" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe>
</div>
```

[**Nota:** Puedes activar los subtítulos (en inglés) con el botón _CC_ (CC/Subtitles) o visualizar la transcripción del video con el botón _Transcript_.]{style="font-size:.8em;opacity:.6"}

### Crear un vector

En el fragmento de código de abajo, crea un vector que contenga los números enteros del uno al diez. Usa la función `c()`.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solución

```r
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
```

:::


### `:`

Si tu vector contiene una secuencia de números contíguos, puedes crearlo con el operador `:`. Ejecuta `1:10` en el fragmento de código de debajo. ¿Qué obtienes? ¿Qué crees que devolvería `1:20`?

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solución

```r
1:10
1:20
```

:::


### `[]`

Puedes extraer cualquier elemento de un vector colocando un par de corchetes después del vector. Dentro de los corchetes, coloca el número del elemento que quieres extraer. Por ejemplo, `vec[3]` devolvería el tercer elemento del vector con nombre `vec`.

Utiliza el fragmento de código de debajo para extraer el cuarto elemento de `vec`.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
vec <- c(1, 2, 4, 8, 16)


```

## {{< fa circle-check >}}&ensp;Solución

```r
vec <- c(1, 2, 4, 8, 16)
vec[4]
```

:::

### Más `[]`

También puedes usar `[]` para extraer múltiples elementos de un vector. Coloca el vector `c(1,2,5)` entre los corchetes aquí abajo. ¿Qué devuelve R?

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
vec <- c(1, 2, 4, 8, 16)
vec[]


```

## {{< fa circle-check >}}&ensp;Solución

```r
vec <- c(1, 2, 4, 8, 16)
vec[c(1,2,5)]
```

:::


### Names

If the elements of your vector have names, you can extract them by name. To do so place a name or vector of names in the brackets behind a vector. Surround each name with quotation marks, e.g. `vec2[c("alpha", "beta")]`.

Extract the element named gamma from the vector below.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
vec2 <- c(alpha = 1, beta = 2, gamma = 3)


```

## {{< fa circle-check >}}&ensp;Solución

```r
vec2 <- c(alpha = 1, beta = 2, gamma = 3)
vec2["gamma"]
```

:::


### Vectorised operations

Predict what the code below will return. Then look at the result.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)


```

:::

###

Good job! Like many R functions, R's math operators are vectorized: they're designed to work with vectors by repeating the operation for each pair of elements.

### Vector recycling

Predict what the code below will return. Then look at the result.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
1 + c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)


```

:::

###

Good job! Whenever you try to work with vectors of varying lengths (recall that `1` is a vector of length one), R will repeat the shorter vector as needed to compute the result.

##

```{r}
#| echo: false
#| results: asis
create_buttons("05-types.html")
```
