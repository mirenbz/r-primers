---
title: "Lists"
format:
  html: 
    toc: false
    section-divs: true
    include-after-body: 
      - text: |
          <script src="/js/progressive-reveal.js"></script>
          <script src="/js/bootstrapify.js"></script>

engine: knitr
filters:
  - webr
webr:
  cell-options:
    editor-font-scale: 0.85
    fig-width: 6
    fig-height: 3.7
    out-width: "70%"
---

```{r include=FALSE}
library(tidyverse)
library(checkdown)

source(here::here("R", "helpers.R"))
```

### Lists {.no-hide}

Mira [este video](https://vimeo.com/220490360):

[**Nota:** Puedes activar los subtítulos (en inglés) con el botón _CC_ (CC/Subtitles) o visualizar la transcripción del video con el botón _Transcript_.]{style="font-size:.8em;opacity:.6"}

```{=html}
<div class="ratio ratio-4x3">
<iframe src="https://player.vimeo.com/video/220490360" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe>
</div>
```

### Lists vs. vectors

::: {.callout-note appearance="simple" icon=false .question}

**Which data structure(s) could you use to store these pieces of data in the same object? `1001`, `TRUE`, `"stories"`**

```{r lists1, echo=FALSE}
check_question(
  answer = c("a list"), 
  options = c(
   "a vector",
   "a list",
   "neither"
  ), 
  type = "radio", 
  button_label = "Registrar respuesta", 
  q_id = 1,
  right = c("Correct! Lists can contain elements that are different types.")
)
```

:::


### Make a list

Make a list that contains the elements `1001`, `TRUE`, and `"stories"`. Give each element a name.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solución

```r
list(number = 1001, logical = TRUE, string = "stories")
```

:::


### Extract an element

Extract the number 1001 from the list below.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
things <- list(number = 1001, logical = TRUE, string = "stories")


```

## {{< fa circle-check >}}&ensp;Solución

```r
things <- list(number = 1001, logical = TRUE, string = "stories")
things$number
```

:::

### Data Frames

You can make a data frame with the `data.frame()` function, which works similar to `c()`, and `list()`. Assemble the vectors below into a data frame with the column names `numbers`, `logicals`, `strings`.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
nums <- c(1, 2, 3, 4)
logs <- c(TRUE, TRUE, FALSE, TRUE)
strs <- c("apple", "banana", "carrot", "duck")


```

## {{< fa circle-check >}}&ensp;Solución

```r
nums <- c(1, 2, 3, 4)
logs <- c(TRUE, TRUE, FALSE, TRUE)
strs <- c("apple", "banana", "carrot", "duck")
data.frame(numbers = nums, logicals = logs, strings = strs)
```

:::

###

Good job. When you make a data frame, you must follow one rule: each column vector should be the same length


### Extract a column

Given that a data frame is a type of list (with named elements), how could you extract the strings column of the `df` data frame below? Do it.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Editor interactivo

```{webr-r}
nums <- c(1, 2, 3, 4)
logs <- c(TRUE, TRUE, FALSE, TRUE)
strs <- c("apple", "banana", "carrot", "duck")
df <- data.frame(numbers = nums, logicals = logs, strings = strs)


```

## {{< fa circle-check >}}&ensp;Solución

```r
df$strings
```

:::

##

```{r}
#| echo: false
#| results: asis
create_buttons("07-packages.html")
```
